document.addEventListener("DOMContentLoaded", () => {
    const memes = document.querySelectorAll(".meme");
    memes.forEach((meme, i) => {
      setTimeout(() => {
        meme.classList.remove("hidden");
        meme.classList.add("show");
      }, 500 + i * 500);
    });
  
    const status = document.getElementById("status");
    const statuses = [
      "üòü '–ù–∏–∫—Ç–æ –Ω–µ —Ü–µ–Ω–∏—Ç —Ç–æ–≥–æ, —á–µ–≥–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ'",
      "üåé ' –ñ–∏–≤—É –∂–∏–∑–Ω—å—é, –æ –∫–æ—Ç–æ—Ä–æ–π –º–µ—á—Ç–∞–ª–∞'",
      "üòõ '–•–æ—á—É —Å–∞–π—Ç –∫—Ä—É—Ç–æ–π  –∏ –ø—Ä–∏–∫–æ–ª—å–Ω—ã–π'",
      "üî• '–ü–∏—à—É —Å—Ç–∏–ª–∏, –∫–∞–∫ –¥—ã—à—É'",
    ];
    let index = 0;
  
    status.addEventListener("click", () => {
      index = (index + 1) % statuses.length;
      status.textContent = statuses[index];
    });
  
    // üí° –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const interestInfo = {
      "–ò–≥—Ä—ã": "–Ø –æ–±–æ–∂–∞—é –∏–≥—Ä—É —Ä–æ–±–ª–∞–∫—Å, —Å–∞–±–≤–µ–π—Å—ë—Ä—Ñ, –ø–∞–∑–∏, —è –æ–±–æ–∂–∞—é –∏–≥—Ä–∞—Ç—å!",
      "–ú—É–∑—ã–∫–∞": "–í —Ü–µ–ª–æ–º —è –ª—é–±–ª—é –º—É–∑—ã–∫—É —Å –±–∏—Ç–æ–º, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—á–∞–µ—Ç, –Ω–æ –∏ —Å –≤–≤–µ—Ä—Ö–Ω–∏–º–∏ –æ–ø–µ—Ä–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏!",
      "–ù–æ—á–µ–≤–∫–∏": "–û—á–µ–Ω—å –ª—é–±–ª—é –∫–æ–≥–¥–∞ –∫–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –Ω–æ—á–µ–≤–∫—É, —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ—Å–µ–ª–æ!",
      "–î–æ–ª–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏": "–Ø –æ–±–æ–∂–∞—é –æ—â—É—â–∞—Ç—å –∫–∞–π—Ñ –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Å—Ç, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!"
    };
  
    const cards = document.querySelectorAll(".card");
    const modal = document.getElementById("modal");
    const modalTitle = document.getElementById("modal-title");
    const modalDesc = document.getElementById("modal-description");
    const closeModal = document.getElementById("closeModal");
  
    cards.forEach(card => {
      card.addEventListener("click", () => {
        const title = card.textContent.trim();
        modalTitle.textContent = title;
        modalDesc.textContent = interestInfo[title] || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–∫–æ—Ä–æ –ø–æ—è–≤–∏—Ç—Å—è.";
        modal.style.display = "flex";
      });
    });
  
    closeModal.addEventListener("click", () => {
      modal.style.display = "none";
    });
  
    window.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.style.display = "none";
      }
    });
  });
// Language switcher functionality
document.addEventListener("DOMContentLoaded", () => {
  // Existing code...
  
  // Language data
  const translations = {
    ru: {
      title: "–°–æ—Ü —Å–µ—Ç—å",
      name: "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
      interests: "–ú–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã",
      projects: "–ú–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã",
      figma: "Figma-–ø—Ä–æ–µ–∫—Ç—ã",
      memes: "–õ—é–±–∏–º—ã–µ –º–µ–º—ã",
      games: "–ò–≥—Ä—ã",
      music: "–ú—É–∑—ã–∫–∞",
      sleepovers: "–ù–æ—á–µ–≤–∫–∏",
      travels: "–î–æ–ª–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏"
    },
    en: {
      title: "Social Network",
      name: "Margarita Smirnova",
      interests: "My Interests",
      projects: "My Projects",
      figma: "Figma Projects",
      memes: "Favorite Memes",
      games: "Games",
      music: "Music",
      sleepovers: "Sleepovers",
      travels: "Long Trips"
    }
  };

  // Language elements to translate
  const elementsToTranslate = {
    "title": document.querySelector("title"),
    "name": document.querySelector("header h1"),
    "interests": document.querySelector(".interests h2"),
    "projects": document.querySelector(".projects h2"),
    "figma": document.querySelector(".figma-projects h2"),
    "memes": document.querySelector(".memes h2"),
    "games": document.querySelector(".card:nth-child(1)"),
    "music": document.querySelector(".card:nth-child(2)"),
    "sleepovers": document.querySelector(".card:nth-child(3)"),
    "travels": document.querySelector(".card:nth-child(4)")
  };

  // Language buttons
  const langButtons = document.querySelectorAll(".lang-btn");
  
  // Set initial language from localStorage or default to Russian
  let currentLang = localStorage.getItem("language") || "ru";
  updateLanguage(currentLang);

  // Button click handlers
  langButtons.forEach(btn => {
    btn.addEventListener("click", () => {
      const lang = btn.dataset.lang;
      if (lang !== currentLang) {
        currentLang = lang;
        updateLanguage(lang);
        localStorage.setItem("language", lang);
        
        // Update active button
        langButtons.forEach(b => b.classList.remove("active"));
        btn.classList.add("active");
      }
    });
  });

  function updateLanguage(lang) {
    // Update all translatable elements
    for (const [key, element] of Object.entries(elementsToTranslate)) {
      if (element && translations[lang][key]) {
        element.textContent = translations[lang][key];
      }
    }
    
    // Update modal content if needed
    const interestInfo = {
      "ru": {
        "–ò–≥—Ä—ã": "–Ø –æ–±–æ–∂–∞—é –∏–≥—Ä—É —Ä–æ–±–ª–∞–∫—Å, —Å–∞–±–≤–µ–π—Å—ë—Ä—Ñ, –ø–∞–∑–∏, —è –æ–±–æ–∂–∞—é –∏–≥—Ä–∞—Ç—å!",
        "–ú—É–∑—ã–∫–∞": "–í —Ü–µ–ª–æ–º —è –ª—é–±–ª—é –º—É–∑—ã–∫—É —Å –±–∏—Ç–æ–º, –∫–æ—Ç–æ—Ä–∞—è –∫–∞—á–∞–µ—Ç, –Ω–æ –∏ —Å –≤–≤–µ—Ä—Ö–Ω–∏–º–∏ –æ–ø–µ—Ä–Ω—ã–º–∏ –Ω–æ—Ç–∞–º–∏!",
        "–ù–æ—á–µ–≤–∫–∏": "–û—á–µ–Ω—å –ª—é–±–ª—é –∫–æ–≥–¥–∞ –∫–æ –º–Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –Ω–æ—á–µ–≤–∫—É, —Å—Ä–∞–∑—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ—Å–µ–ª–æ!",
        "–î–æ–ª–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏": "–Ø –æ–±–æ–∂–∞—é –æ—â—É—â–∞—Ç—å –∫–∞–π—Ñ –æ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Å—Ç, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π!"
      },
      "en": {
        "Games": "I love playing Roblox, Subway Surfers, puzzles - I just love gaming!",
        "Music": "I generally like music with a good beat that pumps you up, but also with high operatic notes!",
        "Sleepovers": "I really love when friends come over for sleepovers - it's always so much fun!",
        "Long Trips": "I adore the thrill of exploring new places and going on adventures!"
      }
    };
    
    // Update project cards if they have different names in translations
    if (lang === "en") {
      document.querySelector(".card:nth-child(1)").textContent = "Games";
      document.querySelector(".card:nth-child(2)").textContent = "Music";
      document.querySelector(".card:nth-child(3)").textContent = "Sleepovers";
      document.querySelector(".card:nth-child(4)").textContent = "Long Trips";
    } else {
      document.querySelector(".card:nth-child(1)").textContent = "–ò–≥—Ä—ã";
      document.querySelector(".card:nth-child(2)").textContent = "–ú—É–∑—ã–∫–∞";
      document.querySelector(".card:nth-child(3)").textContent = "–ù–æ—á–µ–≤–∫–∏";
      document.querySelector(".card:nth-child(4)").textContent = "–î–æ–ª–≥–∏–µ –ø–æ–µ–∑–¥–∫–∏";
    }
  }
});



// –§–æ–Ω–æ–≤–∞—è –º—É–∑—ã–∫–∞
document.addEventListener("DOMContentLoaded", () => {
  // ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
  
  const musicToggle = document.getElementById('musicToggle');
  const bgMusic = document.getElementById('bgMusic');
  const volumeSlider = document.getElementById('volumeSlider');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º—É–∑—ã–∫–∏
  const savedMusicState = localStorage.getItem('musicState');
  const savedVolume = localStorage.getItem('musicVolume');
  
  if (savedMusicState === 'playing') {
    bgMusic.play();
    musicToggle.textContent = 'üîä';
  } else {
    musicToggle.textContent = 'üîá';
  }
  
  if (savedVolume) {
    bgMusic.volume = parseFloat(savedVolume);
    volumeSlider.value = savedVolume;
  } else {
    bgMusic.volume = 0.5; // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ
  musicToggle.addEventListener('click', () => {
    if (bgMusic.paused) {
      bgMusic.play();
      musicToggle.textContent = 'üîä';
      localStorage.setItem('musicState', 'playing');
    } else {
      bgMusic.pause();
      musicToggle.textContent = 'üîá';
      localStorage.setItem('musicState', 'paused');
    }
  });
  
  // –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
  volumeSlider.addEventListener('input', () => {
    bgMusic.volume = volumeSlider.value;
    localStorage.setItem('musicVolume', volumeSlider.value);
  });
  
  // –ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∏—Ç–∏–∫–∏ –±—Ä–∞—É–∑–µ—Ä–æ–≤
  document.body.addEventListener('click', () => {
    if (bgMusic.paused && savedMusicState === 'playing') {
      bgMusic.play().catch(e => console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'));
    }
  }, { once: true });
});
  